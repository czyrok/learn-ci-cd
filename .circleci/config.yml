version: 2.1

jobs:
  backend-lint:
    docker:
      - image: node:18.19.0-alpine3.19
    steps:
      - checkout
      - run:
          name: "Installing Node Modules"
          command: "npm install"
      - run:
          name: "Backend lint"
          working_directory: ./backend
          command: "npm run lint-check"
          
  backend-type-check:
    docker:
      - image: node:18.19.0-alpine3.19
    steps:
      - checkout
      - run:
          name: "Installing Node Modules"
          command: "npm install"
      - run:
          name: "Migrating Database"
          working_directory: ./backend
          command: "npm run db-install"
      - run:
          name: "Backend type check"
          working_directory: ./backend
          command: "npm run type-check"

  backend-unit-tests:
    docker:
      - image: node:18.19.0-alpine3.19
    steps:
      - checkout
      - run:
          name: "Installing Node Modules"
          command: "npm install"
      - run:
          name: "Migrating Database"
          working_directory: ./backend
          command: "npm run db-install"
      - run:
          name: "Backend unit tests"
          working_directory: ./backend
          command: "npm run unit-tests"

  frontend-lint:
    docker:
      - image: node:18.19.0-alpine3.19
    steps:
      - checkout
      - run:
          name: "Installing Node Modules"
          command: "npm install"
      - run:
          name: "Frontend lint"
          working_directory: ./frontend
          command: "npm run lint-check"
          
  frontend-type-check:
    docker:
      - image: node:18.19.0-alpine3.19
    steps:
      - checkout
      - run:
          name: "Installing Node Modules"
          command: "npm install"
      - run:
          name: "Migrating Database"
          working_directory: ./backend
          command: "npm run db-install"
      - run:
          name: "Frontend type check"
          working_directory: ./frontend
          command: "npm run type-check"

  frontend-unit-tests:
    docker:
      - image: node:18.19.0-alpine3.19
    steps:
      - checkout
      - run:
          name: "Installing Node Modules"
          command: "npm install"
      - run:
          name: "Frontend unit tests"
          working_directory: ./frontend
          command: "npm run unit-tests"

  build-project:
    docker:
      - image: node:18.19.0-alpine3.19
    steps:
      - checkout
      - run:
          name: "Installing Node Modules"
          command: "npm install"
      - run:
          name: "Migrating Database"
          working_directory: ./backend
          command: "npm run db-install"
      - run:
          name: "Building back"
          working_directory: ./backend
          command: "npm run build"
      - run:
          name: "Building front"
          working_directory: ./frontend
          command: "npm run build"

  make-release:
    docker:
      - image: node:18.19.0-alpine3.19
    steps:
      - checkout
      - run:
          name: "Installing Git"
          command: |
            apk update
            apk upgrade
            apk add --no-cache git
      - run:
          name: "Installing Node Modules"
          command: "npm install"
      - run:
          name: "Making release"
          command: "npm run make-release"

  deploy-project:
    docker:
      - image: node:18.19.0-alpine3.19
    steps:
      - checkout
      - run:
          name: "Installing SSH"
          command: |
            apk update
            apk upgrade
            apk add --no-cache sshpass
      - run:
          name: "Installing Node Modules"
          command: "npm install"
      - run:
          name: "Migrating Database"
          working_directory: ./backend
          command: "npm run db-install"
      - run:
          name: "Building back"
          working_directory: ./backend
          command: "npm run build"
      - run:
          name: "Building front"
          working_directory: ./frontend
          command: "npm run build"
      - run:
          name: "Setting bash variables"
          command: |
            RELEASE_DIRECTORY_NAME=$(date +"%Y-%m-%dT%H_%M_%S")
            SSH_HOST=169.45.64.60
            SSH_USER=root
            SSH_PASSWORD=ysnT3cZ32Y7V
      - run:
          name: "Copying back"
          command: |
            sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" "mkdir -p /root/backend/releases/$RELEASE_DIRECTORY_NAME/"
            sshpass -p "$SSH_PASSWORD" scp -o StrictHostKeyChecking=no -r ./backend/release/* "$SSH_USER@$SSH_HOST":"/root/backend/releases/$RELEASE_DIRECTORY_NAME/"
      - run:
          name: "Deploying back"
          command: |
            sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" "rm /root/backend/current"
            sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" "ln -s "/root/backend/releases/$RELEASE_DIRECTORY_NAME" /root/backend/current"
            sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" "sudo systemctl restart backend-service"

workflows:
  backend-ci-workflow:
    jobs:
      - backend-lint
      - backend-type-check
      - backend-unit-tests

  frontend-ci-workflow:
    jobs:
      - frontend-lint
      - frontend-type-check
      - frontend-unit-tests

  cd-workflow:
    jobs:
      - build-project:
          filters:
            branches:
              only:
                - main
      - make-release:
          filters:
            branches:
              only:
                - main
      - deploy-project:
          filters:
            branches:
              only:
                - main
